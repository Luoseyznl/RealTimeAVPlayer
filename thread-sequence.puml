@startuml
actor User
participant Main
participant Player
participant Demuxer
participant "Audio StreamSource\n(decoding thread)" as AudioSource
participant "Audio Decoder\n(+resample)" as AudioDec
participant "Audio Producer\n(thread)" as AudioProducer
participant "PCM Ring\nBuffer" as PCM_RING
participant "SDL Audio\nCallback (audio thread)" as SDLAudioCB
participant "Video StreamSource\n(decoding thread)" as VideoSource
participant "Video Decoder" as VideoDec
participant "Player RenderLoop\n(render thread)" as RenderLoop
participant "GLRenderer\n(render thread)" as Renderer
participant GPU

== Start / Play ==
User -> Main: open(file) & play()
Main -> Player: play()
Player -> Demuxer: open / get streams
Player -> AudioSource: startDecoding()
Player -> VideoSource: startDecoding()

== Audio production path ==
AudioSource -> Demuxer: readNextPacket()
Demuxer --> AudioSource: packet
AudioSource -> AudioDec: decodePacket()
AudioDec --> AudioSource: AVFrame (audio)
AudioSource -> AudioProducer: resample & planarâ†’interleaved
AudioProducer -> PCM_RING: pushPCMData(bytes)
note over PCM_RING: ring stores interleaved S16, base_pts set on first frame

loop Device needs audio (periodic)
SDLAudioCB -> PCM_RING: popPCMData(request_len)
PCM_RING --> SDLAudioCB: bytes or silence
SDLAudioCB -> SDLAudioCB: apply volume (use tmp buffer)
SDLAudioCB -> AudioPlayer: update audio_clock (base_pts + consumed_samples)
end

== Video path and sync ==
VideoSource -> Demuxer: readNextPacket()
Demuxer --> VideoSource: packet
VideoSource -> VideoDec: decodePacket()
VideoDec --> VideoSource: AVFrame (video)
VideoSource -> Player: pushFrameToQueue(frame)

Player -> RenderLoop: renderLoop() reads audio_clock
RenderLoop -> Player: request next frame (based on audio_clock / thresholds)
Player -> Renderer: enqueueFrame(selected_frame)
Renderer -> GPU: upload Y/U/V (glTexSubImage2D) + shader (YUV->RGB)
GPU -> Renderer: rasterize & present (swapBuffers)

== Seek flow (user) ==
User -> Player: seek(target_ts)
Player -> SDLAudioCB: pause device
Player -> Renderer: pause rendering
Player -> Demuxer: seek(keyframe_ts)
Player -> VideoSource: flush decoder & clearFrameQueue()
Player -> AudioSource: flush decoder & clear PCM ring & resetClock()
Player -> Demuxer: read from keyframe -> decode
alt decode until target reached
  VideoSource -> VideoDec: decode ...
  VideoDec --> Player: pushFrameToQueue(...)  [N extra frames]
end
Player -> SDLAudioCB: resume device (after reset)
Player -> Renderer: resume rendering

@enduml